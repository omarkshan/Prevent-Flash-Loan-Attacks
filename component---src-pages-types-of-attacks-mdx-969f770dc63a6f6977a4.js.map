{"version":3,"sources":["webpack:///./src/pages/types-of-attacks.mdx","webpack:///./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"names":["_frontmatter","layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent","_objectWithoutPropertiesLoose","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf"],"mappings":"+NAOaA,EAAe,GACtBC,EAAc,CAClBD,gBAGa,SAASE,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,0CACA,6CACA,ksBACA,4FACA,oCACA,gEAA+C,+BAAGC,WAAW,KAAQ,CACjE,KAAQ,oFADmC,yBAA/C,KAEwC,+BAAGA,WAAW,KAAQ,CAC1D,KAAQ,8BAD4B,yBAFxC,mRAIsT,+BAAGA,WAAW,KAAQ,CACxU,KAAQ,yDAD0S,kBAJtT,KAOA,4CACA,wGACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,2IAKL,qMACA,kCAAiB,+BAAGA,WAAW,KAAQ,CACnC,KAAQ,sDADK,0DAGjB,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,oRAOL,oCACA,uXACA,oCACA,qBAAG,0BAAYA,WAAW,KAAvB,6BACH,4CACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,kKAQL,4CACA,oCACA,2DACA,uHACA,uBAAK,kCAAMA,WAAW,OAAU,IAA3B,kCAEL,+DAKJJ,EAAWK,gBAAiB,G,kCCvEb,SAASC,EAA8BC,EAAQC,GAC5D,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IAEIE,EAAKC,EAFLC,EAAS,GACTC,EAAaC,OAAOC,KAAKP,GAG7B,IAAKG,EAAI,EAAGA,EAAIE,EAAWG,OAAQL,IACjCD,EAAMG,EAAWF,GACbF,EAASQ,QAAQP,IAAQ,IAC7BE,EAAOF,GAAOF,EAAOE,IAGvB,OAAOE,EAZT","file":"component---src-pages-types-of-attacks-mdx-969f770dc63a6f6977a4.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1>{`Types of attacks`}</h1>\n    <h2>{`Oracle Manipulation`}</h2>\n    <p>{`Also known as Price Oracle Attacks. This seems to be the #1 cause of attacks at the moment, by far. What is important to note, is that decentralized exchanges are not decentralized oracles. Using Uniswap, Sushiswap, or Curve to get pricing information to execute trades is pulling data from potocols whose price depends soley on liquidity. Looking at the infamous ground zero bZx attack that sparked this wave of attacks, we can see exactly what happens. These flash loans are used to crash and manipulate the price of these decentralized exchanges, which most projects deemed safe to use. The issue here relies in the fact that these protocols prices depend entirely on liquidity.`}</p>\n    <p>{`See the above section for what something like this would look like.`}</p>\n    <h3>{`Prevention`}</h3>\n    <p>{`The easiest way to solve this is to use `}<a parentName=\"p\" {...{\n        \"href\": \"https://blog.chain.link/flash-loans-and-the-importance-of-tamper-proof-oracles/\"\n      }}>{`decentralized oracles`}</a>{`. `}<a parentName=\"p\" {...{\n        \"href\": \"https://feeds.chain.link/\"\n      }}>{`Chainlink Price Feeds`}</a>{` are the leading decentralized oracle provider, and you can see that the vast majority of the protocols end up adding Chainlink to fix these attacks. If the data (price or otherwise) you're looking for isn't there yet, you can always request new decentralized networks or `}<a parentName=\"p\" {...{\n        \"href\": \"https://docs.chain.link/docs/make-a-http-get-request\"\n      }}>{`build your own`}</a>{`.`}</p>\n    <h3>{`Prevention Example`}</h3>\n    <p>{`Let's take a look at some malicious pseudo-code, pretend these are each ERC20s.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`uint256 priceOfMyGovernanceTokenInETH = dexTokenETHPairPrice;\nmyGovernanceToken.transfer(msg.sender, priceOfMyGovernanceTokenInETH)\n`}</code></pre>\n    <p>{`This right here should be the easiest red flag on the planet. If you ever do a transfer based on a centralized price oracle, you're asking to get owned. One way or another.`}</p>\n    <p>{`Check the `}<a parentName=\"p\" {...{\n        \"href\": \"https://docs.chain.link/docs/get-the-latest-price\"\n      }}>{`Chainlink documentation for decentralized price feeds`}</a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import \"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\";\n// constructor and getLatestPrice function truncated\nuint256 priceOfMyGovernanceTokenInETH = getLatestChainlinkPrice();\nmyGovernanceToken.transfer(msg.sender, priceOfMyGovernanceTokenInETH)\n`}</code></pre>\n    <h2>{`Reentrancy`}</h2>\n    <p>{`A reentrancy attack can occur when you create a function that makes an external call to another untrusted contract before it resolves any effects. If the attacker can control the untrusted contract, they can make a recursive call back to the original function, repeating interactions that would have otherwise not run after the effects were resolved.`}</p>\n    <h3>{`Prevention`}</h3>\n    <p><inlineCode parentName=\"p\">{`Send, Transfer, and Call`}</inlineCode></p>\n    <h3>{`Prevention Example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function withdraw() external {\n    uint256 amount = balances[msg.sender];\n    require(msg.sender.call.value(amount)());\n    balances[msg.sender] = 0;\n}\n`}</code></pre>\n    <h2>{`Pump and Arbitrage`}</h2>\n    <h3>{`Prevention`}</h3>\n    <h2>{`Safe Integer use and basic audits`}</h2>\n    <p>{`Everything that applies to basic contract safety applies to flash loan attack safety. Such as:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`using SafeMath for uint256;\n`}</code></pre>\n    <p>{`Watch out for integer overflows, etc.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"sourceRoot":""}